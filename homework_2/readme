README:
-----------------------

This directory contains a python simulation environment and model used to solve LQR-Tree problems.
The model based on the following paper:
    Philipp Reist, Pascal V. Preiswerk, and Russ Tedrake. "Feedback Motion Planing with Simulation-Based LQR-Tree". 
      SAGE. 2016.

The simulation environment and modeling consists
of the first homework (homework #2) assigned for the course ME-396D Decision Control Human-Centered Robotics
on Fall 016 at University of Texas at Austin.

  The Latest Version
  ------------------
  version: 1.0
  
  Updates
  ------------------
  10/18/2016 : - Incorporated scripts and library dependence based on CVXPY (A convex optimization library)
			   - Incorporated scripts and library dependence based on Mosek
			   - Created Eclipse Python Project.

  Documentation
  -------------

  The report with a simple documentation is provided through the UT's Confluence Web Site
  Also, a good part of the source code has documentation that provides a good understanding of the
  classes, methods e data flow used during the simulations.
 
  Installation
  ------------
  To build and run the simulation and model, just follow the
  instructions below:
  - The project was build using eclipse IDE
  - Install the PyDev plugin in the Eclipse IDE to make easy to build/update the software. 
  - Import the software using the eclipse option: File->Import
  - Search into the directory "HW2" (root of the project)
  - Eclipse will find the project... press "Ok"
  - The project is loaded into the Eclipse IDE... Now you can edit the files
  - To build/run, go to eclipse Run->configurations menu, and search for pyDev project.
  - Create a new Run configuration project selected the "HW2" and the main.py file.
  - Run the configuration file.
  - The simulation plots are also generated in ".png" files in the root path of the project.
  - To execute the simulator, into the project's source call: python main.py  
  - To execute the stimuli gui (Graphical User Interface), into the project's source call: python gui.py

For more information about the simulator and SCT model implemented in python, please
refer to the comments in the source code and logs generated during the program's execution.

Thanks!
Austin, TX, USA - 10/18/16.